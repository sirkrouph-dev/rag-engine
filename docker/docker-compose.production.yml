# ================================
# Production Docker Compose Configuration
# Full production stack with monitoring and security
# ================================

version: '3.8'

services:
  # ================================
  # Main Application
  # ================================
  rag-engine:
    build:
      context: ..
      dockerfile: docker/Dockerfile.production
    container_name: rag-engine-production
    restart: unless-stopped
    environment:
      - RAG_ENGINE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-rag_engine}
      - DB_USER=${DB_USER:-rag_user}
      - DB_PASSWORD=${DB_PASSWORD:-secure_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-production-jwt-secret-change-me}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT}
      - PINECONE_INDEX=${PINECONE_INDEX}
      - RUN_MIGRATIONS=true
    ports:
      - "8000:8000"
    volumes:
      - rag-engine-data:/app/data
      - rag-engine-logs:/app/logs
      - rag-engine-cache:/app/cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ================================
  # Database
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: rag-postgres-production
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-rag_engine}
      - POSTGRES_USER=${DB_USER:-rag_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure_password}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - rag-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-rag_user} -d ${DB_NAME:-rag_engine}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ================================
  # Redis Cache
  # ================================
  redis:
    image: redis:7-alpine
    container_name: rag-redis-production
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password} --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ================================
  # Monitoring Stack
  # ================================
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: rag-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - rag-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: rag-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - rag-network

  # ================================
  # Load Balancer & SSL
  # ================================
  nginx:
    image: nginx:alpine
    container_name: rag-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - rag-engine
    networks:
      - rag-network

  # ================================
  # Log Management
  # ================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: rag-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - rag-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: rag-logstash
    restart: unless-stopped
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - rag-engine-logs:/app/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - rag-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: rag-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - rag-network

# ================================
# Networks
# ================================
networks:
  rag-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ================================
# Volumes
# ================================
volumes:
  # Application data
  rag-engine-data:
    driver: local
  rag-engine-logs:
    driver: local
  rag-engine-cache:
    driver: local
    
  # Database data
  postgres-data:
    driver: local
  redis-data:
    driver: local
    
  # Monitoring data
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
    
  # Logging data
  elasticsearch-data:
    driver: local
  nginx-logs:
    driver: local
